## Tidyverse basics

Welcome to Chapter 2 of our tutorial on the tidyverse! In this chapter, we delve into the heart of data manipulation with R using the basic tidyverse packages, particularly focusing on the fundamental functionalities of dplyr.

The tidyverse, a collection of R packages designed for data science, has revolutionized the way we work with data in R. At its core, the tidyverse emphasizes clarity, simplicity, and consistency, making it easier for users to manipulate, visualize, and model data effectively.

In this chapter, we'll explore the basic dplyr verbs, which serve as the building blocks for data manipulation tasks. These verbs provide intuitive and powerful tools for transforming, summarizing, filtering, and arranging data, enabling you to perform complex data manipulations with ease.

Whether you're new to R or looking to streamline your data analysis workflow, mastering the basic tidyverse tools will empower you to tackle real-world data challenges efficiently and effectively. By the end of this chapter, you'll have a solid understanding of how to use dplyr to wrangle, clean, and explore your data, setting the stage for more advanced analyses in subsequent chapters.

So, let's dive in and uncover the power of the basic tidyverse, starting with the essential dplyr verbs that form the backbone of data manipulation in R. Get ready to unleash the full potential of your data with the tidyverse!

## `{dplyr}` verbs

-   `mutate()`

-   `filter()`

-   `select()`

-   `arrange()`

-   `summarise()`

```{r}
#| rows.print=12
iris
```

```{r}
library(dplyr)
```

```{r}
#| rows.print=12
dplyr::glimpse(iris)
```

### mutate

$$
A=\pi lw
$$

```{r}
#| rows.print=12
mutate(.data = iris, area_Sepal = pi*Sepal.Length*Sepal.Width)
```

```{r}
#| rows.print=12
iris %>% mutate(area_Sepal = pi*Sepal.Length*Sepal.Width)
```

Você errou a coluna `petal.lenght` e precisa multiplicar por 2.

```{r}
#| rows.print=12
iris %>% mutate(Petal.Length = Petal.Length*2)
```

Usando informações externas

```{r}
#| rows.print=12
iris %>% mutate(reino = "planta")
```

```{r,eval=FALSE}
#| rows.print=12
iris %>% mutate(reino = c("planta","fungo"))
```

```{r}
#| rows.print=12
iris %>% mutate(reino = 1:150)
```

```{r}
#| rows.print=12
iris %>% mutate(reino = rep(LETTERS[1:5],30))
```

```{r}
#| rows.print=12
iris %>% mutate(Code = paste("spc",Species,Petal.Length,Petal.Width,
                             sep = '_'))
```

```{r}
#| rows.print=12
iris %>% mutate(Code = glue:::glue("Spc:{Species}_Len:{Petal.Length}_Wid:{Petal.Width}"))
```

### select

Serve para selecionar colunas (variaveis).

Nota: se você estiver trabalhando com `bioconductor` recomendo usar `dplyr::select()`

```{r}
#| rows.print=12
select(iris, Sepal.Length)
```

```{r}
#| rows.print=12
select(iris, Sepal.Length,Sepal.Width)
```

```{r}
#| rows.print=12
#select(iris, Sepal.Length,Sepal.Width)
iris %>% select(Length = Sepal.Length,
                Width = Sepal.Width)
```

```{r}
#| rows.print=12
iris %>% select(starts_with("Sepal"))
```

```{r}
#| rows.print=12
iris %>% select(ends_with("Width"))
```

```{r}
#| rows.print=12
iris %>% select(Species,ends_with("Width"))
```

```{r}
#| rows.print=12
#Não faz muito sentido usar isso - Ou usar o que o icaro disse
(iris_2 <- iris %>% select(2))
```

```{r}
#| rows.print=12
iris_v2 <- iris[,2]
```

### pull() - extrai o vetor

```{r}
#| rows.print=12
iris %>% pull(Sepal.Width)
```

```{r}
#| rows.print=12
pull(iris_2)
```

### filter

Filtra linhas de uma tabela

```{r}
#| rows.print=12
iris
iris %>% filter(Sepal.Length >= 4.7)
```

```{r}
#| rows.print=12
iris %>% filter(Sepal.Length >= 4.7,
                Petal.Length < 1.5)
```

```{r}
#| rows.print=12
iris %>% filter(Sepal.Length >= 4.7 | Petal.Length < 1.5)
```

```{r}
#| rows.print=12
iris %>% filter(Species == "setosa")
```

```{r}
#| rows.print=12
iris %>% filter(Species != "setosa")
```

```{r}
#| rows.print=12
iris %>% filter(Species %in% c("virginica","versicolor"))
```

### arrange

Colocar a tabela em ordem (linhas).

```{r}
#| rows.print=12
iris %>% arrange(Sepal.Length)
```

```{r}
#| rows.print=12
iris %>% arrange(desc(Sepal.Length))
```

```{r}
#| rows.print=12
iris %>% arrange(desc(Species))
```

```{r}
#| rows.print=12

#Não quer a ordem alfabética

(iris_fct <- iris %>% mutate(Species = factor(Species,levels = c("versicolor","setosa","virginica"))))

```

```{r}
#| rows.print=12
iris$Species
iris_fct$Species
```

```{r}
#| rows.print=12
iris_fct %>% 
  arrange(Species)
```

```{r}
#| rows.print=12
iris %>% 
  mutate(Species = factor(Species,levels = c("versicolor","setosa","virginica"))) %>% 
  arrange(Species)
```

```{r}
#| rows.print=12

iris %>% arrange(Sepal.Length,desc(Sepal.Width))
```

### summarise

Cria um resumo estatistico

```{r}
#| rows.print=12

summarise(iris, 
          media_sepal_length = mean(Sepal.Length),
          sd_sepal_length = sd(Sepal.Length))



```

```{r}
summary(iris)
```

```{r}
iris %>% 
  count(Species)
```

```{r}
iris %>% 
  group_by(Species) %>% 
  summarise(media_sepal_length = mean(Sepal.Length),
          sd_sepal_length = sd(Sepal.Length))
  #ungroup
```

```{r}
iris %>% 
  group_by(Species) %>% 
  ungroup()
```

```{r}
#across - mutate & summarise

#?across()


q1 <- function(x) {
  quantile(x, .25)
}

q3 <- function(x) {
  quantile(x, .75)
}

IQR <- function(x) {
  
  q3(x) - q1(x)
}

#Todas as colunas numericas
iris %>% 
  summarise(across(.cols = where(is.numeric),
                   .fns = list(media = mean,
                               mediana = median,
                               maximo = max,
                               minimo = min,
                               desvpad = sd,
                               Q1 = q1,
                               Q3 = q3,
                               IQR = IQR),
                   .names = "{.fn}_{.col}"))
```

```{r}
iris_stats <- iris %>% 
  group_by(Species) %>% 
  summarise(across(.cols = where(is.numeric),
                   .fns = list(media = mean,
                               mediana = median,
                               maximo = max,
                               minimo = min,
                               desvpad = sd,
                               Q1 = q1,
                               Q3 = q3,
                               IQR = IQR),
                   .names = "{.fn}_{.col}"))
```

## {tidyr}

```{r}
iris_stats
```

Longos x amplo (long x wide)

Longo: mais linhas que colunas

Amplo: mais colunas que linhas

### Pivots

```{r}
library(tidyr)
(iris_stats_long <- iris_stats %>% 
  pivot_longer(cols = -Species,
               names_to = "Colunas",
               values_to = "Linhas"))
```

### Separate

```{r}
(iris_stats_long <- iris_stats_long %>% 
  separate(col = Colunas,
           into = c("Stat","Var"),
           sep = "_") %>% 
  separate(col = Var,
           into = c("Org","Metrica"),
           sep = "\\.") # palavras reservadas
  )
```

## {ggplot2}

```{r}
library(ggplot2)
iris %>% 
  tibble::rowid_to_column() %>% 
  ggplot(aes(x = rowid, y = Sepal.Length)) +
  geom_line()
```

```{r}
iris %>% 
  tibble::rowid_to_column() %>% 
  ggplot(aes(x = rowid, y = Sepal.Length)) +
  geom_line(color = "blue")+
  geom_line(aes(y = Sepal.Width))
```

```{r}
iris %>% 
  tibble::rowid_to_column() %>% 
  pivot_longer(cols = starts_with("Sepal"),
               names_to = "Vars",values_to = "Vals") %>%
  ggplot(aes(x = rowid, y = Vals, color = Vars)) +
  geom_line() +
  facet_wrap(~Vars)
```

```{r}
iris_stats_long %>% 
  pivot_wider(names_from = Metrica,
              values_from = Linhas)
```
